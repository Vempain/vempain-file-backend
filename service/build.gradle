import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'application'
	id 'org.springframework.boot' version "${springBootVersion}"
	id "io.freefair.lombok" version "${ioFreeFairLombok}"
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'fi.poltsi.vempain'
version = project.hasProperty("releaseVersion") ? project.releaseVersion : '0.0.1-SNAPSHOT'

bootJar {
	archiveFileName = "${rootProject.name}-${version}.jar"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of("${javaVersion}")
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url = "https://maven.pkg.github.com/Vempain/vempain-auth"
		credentials {
			username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
			password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
		}
	}
	maven { url = 'https://repo.spring.io/milestone' }
}

ext {
	set('springAiVersion', "1.0.0-M5")
}

dependencies {
	implementation project(':api')
	// This needs to be built first in vempain-auth
	implementation "fi.poltsi.vempain:vempain-auth-core:${vempainAuthVersion}"
	implementation "fi.poltsi.vempain:vempain-auth-api:${vempainAuthVersion}"
	implementation "fi.poltsi.vempain:vempain-admin-backend-api:${vempainAdminVersion}"
	// Spring
	implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-web-services:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
	developmentOnly "org.springframework.boot:spring-boot-docker-compose:${springBootVersion}"
	implementation "org.springframework.session:spring-session-core:3.5.1"
	implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
	implementation "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"
	implementation "io.micrometer:micrometer-registry-elastic:${micrometerVersion}"
	implementation "org.flywaydb:flyway-core:${flywayVersion}"
	implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
	testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
	runtimeOnly "org.flywaydb:flyway-database-postgresql:${flywayVersion}"
	// https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.10"
	// https://mvnrepository.com/artifact/jakarta.xml.bind/jakarta.xml.bind-api
	implementation "jakarta.xml.bind:jakarta.xml.bind-api:4.0.2"
	// https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api
	implementation "jakarta.annotation:jakarta.annotation-api:3.0.0"
	// https://mvnrepository.com/artifact/commons-codec/commons-codec
	implementation "commons-codec:commons-codec:1.19.0"
	// https://mvnrepository.com/artifact/org.json/json
	implementation "org.json:json:20250517"
	// https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-openfeign
	implementation "org.springframework.cloud:spring-cloud-starter-openfeign:4.3.0"
	// https://mvnrepository.com/artifact/net.coobird/thumbnailator
	implementation "net.coobird:thumbnailator:0.4.20"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
	// https://mvnrepository.com/artifact/org.postgresql/postgresql
	runtimeOnly "org.postgresql:postgresql:42.7.7"
	testImplementation platform("org.junit:junit-bom:$junitVersion")
	testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
	testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
	testImplementation "org.testcontainers:postgresql:${testContainersVersion}"
	// https://mvnrepository.com/artifact/org.springframework.security/spring-security-test
	testImplementation "org.springframework.security:spring-security-test:6.5.3"
	// https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
	testImplementation "org.mockito:mockito-junit-jupiter:5.19.0"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
		// https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:2025.0.0"
	}
}

test {
	useJUnitPlatform()
}

processResources {
	// capture once at configuration time (CC-safe)
	def ver = version.toString()
	// declare as input for configuration cache
	inputs.property("projectVersion", ver)

	filesMatching("**/application.yaml") {
		filteringCharset = "UTF-8"
		filter(ReplaceTokens,
				tokens: [projectVersion: ver]
		)
	}
}
