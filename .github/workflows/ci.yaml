name: CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: vempain
  IMAGE_NAME: ${{ github.repository }}

concurrency: build

jobs:
  test:
    name: Run all tests
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Java temurin 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install exifdata for test setup
        run: sudo apt-get install -y exiftool

      - name: Run test setup
        shell: bash
        run: sudo ./testSetup.sh --developer-name $(whoami) --skip-root-check --skip-answers

      - name: Run tests with Gradle
        run: ./gradlew clean test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-results
          path: service/build/reports
          retention-days: 2
          compression-level: 9
          overwrite: true
          if-no-files-found: warn

  build-docker:
    name: Build and push Docker image
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get main and base version
        id: basemain
        shell: bash
        run: |
          baseVersion=$(cat VERSION)
          mainVersion=$(echo ${baseVersion} | cut -d '.' -f 1)
          echo "baseVersion=${baseVersion}" >> $GITHUB_OUTPUT
          echo "mainVersion=${mainVersion}" >> $GITHUB_OUTPUT

      - name: Generate new version
        id: newVer
        shell: bash
        run: |
          git fetch --tags origin
          currentVersion=$(git tag --list --sort=-version:refname "${baseVersion}.*" | head -n 1 || "${baseVersion}.0")

          if [ -z "${currentVersion}" ]; then
            newVersion="${baseVersion}.0"
          else
            runningNumber=$(echo ${currentVersion} | cut -f 3 -d '.')
            newVersion="${baseVersion}.$((${runningNumber} + 1))"
          fi
          echo "The generated new version is: ${newVersion}"
          echo "newVersion=${newVersion}" >> $GITHUB_OUTPUT
        env:
          baseVersion: ${{ steps.basemain.outputs.baseVersion }}

      - name: Set up Java temurin 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build jar-file with Gradle
        shell: bash
        run: ./gradlew clean bootJar -Pversion=${newVersion}
        env:
          newVersion: ${{ steps.newVer.outputs.newVersion }}

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image to registry
        shell: bash
        run: |
          imgName="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')"
          docker build . --tag ${imgName}:latest
          echo "Setting versions to: '${mainVersion}', '${baseVersion}', '${newVersion}'"
          docker image tag ${imgName}:latest ${imgName}:${mainVersion}
          docker image tag ${imgName}:latest ${imgName}:${baseVersion}
          docker image tag ${imgName}:latest ${imgName}:${newVersion}
          docker push --all-tags ${imgName}
        env:
          mainVersion: ${{ steps.basemain.outputs.mainVersion }}
          baseVersion: ${{ steps.basemain.outputs.baseVersion }}
          newVersion: ${{ steps.newVer.outputs.newVersion }}
      - name: Create tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TAG_CREATION_TOKEN }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.newVer.outputs.newVersion }}',
              sha: context.sha
            })
